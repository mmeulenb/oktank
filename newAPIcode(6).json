"```javascript\nconst express = require('express');\nconst app = express();\n\n// Mock data\nconst mockData = {\n  location: {\n    latitude: 37.7749,\n    longitude: -122.4194,\n    accuracy: 25,\n    sources: [\n      {\n        type: 'gps',\n        accuracy: 10\n      },\n      {\n        type: 'network',\n        accuracy: 30\n      }\n    ]\n  },\n  device: {\n    make: 'Apple',\n    model: 'iPhone 12',\n    imsi: '310260000000000',\n    provider: 'AT&T',\n    connectionType: 'lte',\n    signalStrength: -80,\n    connectedSince: '2023-04-01T10:30:00Z'\n  }\n};\n\napp.get('/location', (req, res) => {\n  res.json({\n    location: mockData.location,\n    device: mockData.device\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\nThis Node.js code sets up an Express server that listens on port 3000 and responds to a GET request on the `/location` endpoint. The response includes both the location and device information as specified in the API specification.\n\nThe `mockData` object contains sample data that matches the expected structure of the `LocationResponse` schema. The `location` object includes `latitude`, `longitude`, `accuracy`, and an array of `sources` with `type` and `accuracy` properties.\n\nThe `device` object includes `make`, `model`, `imsi`, `provider`, `connectionType`, `signalStrength`, and `connectedSince` properties.\n\nWhen a client sends a GET request to `/location`, the server responds with a JSON object containing the `location` and `device` objects from the `mockData`.\n\nNote that this is a basic implementation using mock data. In a real-world scenario, you would likely retrieve the location and device information from external sources or services, and handle various edge cases and error conditions."